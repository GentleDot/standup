{"version":3,"sources":["img/standup_logo.png","img/anonymous.jpg","Profile.js","Editor.js","Article.js","config.js","FirebaseDao.js","App.js","serviceWorker.js","index.js"],"names":["Profile","isAnonymous","className","src","Anonymous","alt","Editor","props","onPaste","bind","editorChange","getCard","hasValue","handleSubmit","state","embedlyUrl","undefined","content","event","clipboardData","items","getAsString","text","detectURL","setState","checkText","this","currentTarget","textContent","keyCode","matcherURL","match","matcherURLWithoutHTTP","urls","length","value","trim","article","Object","assign","user","url","title","description","imageUrl","imgWidth","imgHeight","thumbnailUrl","thumbnailWidth","thumbnailHeight","Article","submit","contentEditable","placeholder","onKeyUp","disabled","onClick","Component","firebase_config","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","FirebaseDao","config","firebase","apps","initializeApp","postData","database","ref","child","push","key","updates","update","JSON","parse","stringify","remove","off","pagesize","orderByKey","limitToLast","App","dao","getArticles","articles","newKey","articleItems","i","console","log","list","on","snapshots","forEach","dataSnapshot","item","val","reverse","logo","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.35a55569.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/standup_logo.dea47840.png\";","export default __webpack_public_path__ + \"static/media/anonymous.35a8b45d.jpg\";","import React from \"react\";\r\nimport './Profile.css';\r\nimport Anonymous from './img/anonymous.jpg';\r\n\r\n\r\nconst Profile = isAnonymous => {\r\n  if (isAnonymous) {\r\n      return (\r\n        <div className=\"anonymous\">\r\n            <div className=\"today_title\">\r\n                무엇을 공유할까요?\r\n            </div>\r\n            <div className=\"anonymous_name\"> 티파니 </div>\r\n            <div className=\"anonymous_img_wrap\">\r\n                <img src={Anonymous} alt=\"profiles\" className=\"anonymous_img\" />\r\n            </div>\r\n        </div>\r\n      );\r\n  }\r\n    return <div/>; // 익명이 아닌 경우 일단은 빈 <div>\r\n};\r\n\r\nexport default Profile;\r\n","import React, {Component} from \"react\";\r\nimport \"./Editor.css\"\r\nimport Profile from \"./Profile\";\r\nimport Article from \"./Article\";\r\n\r\nclass Editor extends Component {\r\n    /* 사용되는 메서드들을 모두 this로 사용할 수 있도록 binding 해 준다. */\r\n    constructor(props) {\r\n        super(props);\r\n        this.onPaste = this.onPaste.bind(this);\r\n        this.editorChange = this.editorChange.bind(this);\r\n        this.getCard = this.getCard.bind(this);\r\n        this.hasValue = this.hasValue.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.state = {\r\n            embedlyUrl: undefined,\r\n            content: undefined\r\n        }\r\n    }\r\n\r\n    // 복붙에 사용되는 이벤트를 다뤄준다.\r\n    onPaste(event) {\r\n        // text가 String 형태인지 확인해야 하지만\r\n        // getAsString 이기 때문에 에러보다는 비정상 작동이 이뤄질 수 있다.\r\n        event.clipboardData.items[0].getAsString(text => {\r\n            if (this.detectURL(text)) {\r\n                this.setState({embedlyUrl: text, content: this.state.content});\r\n            }\r\n        })\r\n    }\r\n\r\n    // 에디터 내용 변경 시 이벤트\r\n    editorChange(event) {\r\n        let checkText = this.detectURL(event.currentTarget.textContent);\r\n\r\n        // 엔터와 스페이스바를 입력했을 때 편집기의 값을 확인\r\n        if (!this.state.embedlyUrl &&\r\n            (event.keyCode === 32 || event.keyCode === 13) &&\r\n            checkText) {\r\n            this.setState({embedlyUrl: checkText, content: event.currentTarget.textContent});\r\n        } else {\r\n            this.setState({content: event.currentTarget.textContent});\r\n        }\r\n    }\r\n\r\n    detectURL(text) {\r\n        let matcherURL = text.match(/(https?:\\/\\/[^\\s]+\\.[a-z]{2,})/g);\r\n        let matcherURLWithoutHTTP = text.match(/(www.[^\\s]+\\.[a-z]{2,})/g);\r\n        let urls = matcherURL || matcherURLWithoutHTTP;\r\n\r\n        if (urls && urls.length > 0) {\r\n            return urls[0];\r\n        } else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    getCard(embedlyUrl) {\r\n        if (embedlyUrl) {\r\n            return (\r\n                <div>{embedlyUrl}</div>\r\n            );\r\n        } else {\r\n            return (<div/>);\r\n        }\r\n    }\r\n\r\n    hasValue(value) {\r\n        if (value && typeof value === \"string\") {\r\n            return (!value) ? false : (value.trim() !== \"\");\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        let article = Object.assign({}, Article());\r\n        article.user = \"gentledot\";\r\n        article.content = this.state.content;\r\n        article.urls[0].url = this.state.embedlyUrl;\r\n        this.props.submit(article);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"wrapEditor\">\r\n                <Profile isAnonymous={this.props.isAnonymous}/>\r\n                <div className=\"textEditor\">\r\n                    <div className=\"innerEdit\"\r\n                         contentEditable=\"true\"\r\n                         placeholder=\"글쓰기......\"\r\n                         onPaste={this.onPaste}\r\n                         onKeyUp={this.editorChange}>\r\n                    </div>\r\n                </div>\r\n                <div className=\"actionBar\">\r\n                    <button className=\"upload\" disabled={!this.hasValue(this.state.content)}\r\n                            onClick={this.handleSubmit}>\r\n                        <span>스탠드업!</span>\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Editor;\r\n","export default function article(\r\n    user = \"tester\",\r\n    content = \"hello, react-world.\",\r\n    url = \"https://github.com/gentledot\",\r\n    title = \"테스트 게시물\",\r\n    description = \"리액트 앱 제작을 익히기 위해 야금야금 만드는 중\",\r\n    imageUrl = \"test\",\r\n    imgWidth = 640,\r\n    imgHeight = 480,\r\n    thumbnailUrl = \"https://avatars1.githubusercontent.com/u/15000594?s=400&u=ab8d53076cfa201bb8d1cc25f4bb93f6c12fc4d1&v=4\",\r\n    thumbnailWidth = 80,\r\n    thumbnailHeight = 80\r\n) {\r\n    return {\r\n        user: user,\r\n        content: content,\r\n        urls: [{\r\n            url: url,\r\n            title: title,\r\n            description: description,\r\n            imageUrl: imageUrl,\r\n            imgWidth: imgWidth,\r\n            imgHeight: imgHeight,\r\n            thumbnailUrl: thumbnailUrl,\r\n            thumbnailWidth: thumbnailWidth,\r\n            thumbnailHeight: thumbnailHeight\r\n        }]\r\n    };\r\n}","const firebase_config = {\r\n    apiKey: process.env.REACT_APP_FIREBASE_KEY,\r\n    authDomain : process.env.REACT_APP_AUTH_DOMAIN,\r\n    databaseURL: process.env.REACT_APP_DB_URL,\r\n    projectId: process.env.REACT_APP_PROJECT_ID,\r\n    storageBucket: process.env.REACT_APP_STRG_BKT,\r\n    messagingSenderId: process.env.REACT_APP_MSG_SENDER_ID,\r\n    appId: process.env.REACT_APP_FIREBASE_APP_ID,\r\n    measurementId: process.env.REACT_APP_MEASUREMENT_ID\r\n};\r\n\r\nexport default firebase_config;","import firebase from 'firebase';\r\n\r\nexport default class FirebaseDao {\r\n\r\n    constructor(config) {\r\n        if (!firebase.apps.length) {\r\n            firebase.initializeApp(config);\r\n        }\r\n    }\r\n\r\n    insert(postData) {\r\n        return firebase.database().ref().child('posts').push(postData);\r\n    }\r\n\r\n    update(key, postData) {\r\n        var updates = {};\r\n        updates['/posts/' + key] = postData;\r\n        updates['/user-posts/gentledot/' + key] = postData;\r\n        return firebase.database().ref().update(JSON.parse(JSON.stringify(updates)));\r\n    }\r\n\r\n    remove(key) {\r\n        firebase.database().ref('/posts/').child(key).remove();\r\n        return firebase.database().ref('/user-posts/gentledot/').child(key).remove();\r\n    }\r\n\r\n    off() {\r\n        return firebase.database().ref().off();\r\n    }\r\n\r\n    newKey() {\r\n        return firebase.database().ref().child('posts').push().key;\r\n    }\r\n\r\n    list(pagesize) {\r\n        return firebase.database().ref('/posts/')\r\n            .orderByKey().limitToLast(pagesize);\r\n    }\r\n\r\n    getArticle(key) {\r\n        return firebase.database().ref('/posts/' + key);\r\n    }\r\n\r\n    /*constructor(config) {\r\n        // firebase remote 서버 정보 설정\r\n        firebase.initializeApp(config);\r\n        this.database = firebase.database();\r\n        console.log(`초기 데이터베이스 설정 확인 ${this.database.app.options}`);\r\n    }\r\n\r\n    update(key, postData) {\r\n        let updates = {};\r\n        updates['/posts/' + key] = postData;\r\n        // updates['/user-posts/gentledot/' + key] = postData;\r\n        console.log(updates);\r\n        return this.database.ref().update(updates);\r\n    }\r\n\r\n    insert(postData) {\r\n        try{\r\n            console.log(`firebase 실시간 데이터베이스 접속 확인 : ${this.database}`);\r\n            console.log(`firebase 이건 확인된거야? : ${this.database.ref().child('posts')}`);\r\n            return this.database.ref().child(\"post\").push().set(postData, function (error) {\r\n                if (error){\r\n                    console.log(`push 실패 : ${error}`);\r\n                } else {\r\n                    console.log(`${postData} push 성공`);\r\n                }\r\n            });\r\n        } catch (e) {\r\n            console.log(`무슨 오류가 발생하는데!!!!!! ${e.toString()}`)\r\n        }\r\n\r\n    }\r\n\r\n    remove(key){\r\n        this.database.ref('/posts/').child(key).remove();\r\n        // return database.ref('/user-posts/gentledot/').child(key).remove();\r\n        return this.database.ref('/posts/').child(key).remove();\r\n    }\r\n\r\n    article(key) {\r\n        return this.database.ref('/posts/' + key);\r\n    }\r\n\r\n    newKey() {\r\n        return this.database.ref().child('/posts/').push().key;\r\n    }*/\r\n}","import React, {Component} from 'react';\r\nimport logo from './img/standup_logo.png';\r\nimport './App.css';\r\nimport Editor from './Editor';\r\nimport config from \"./config\";\r\nimport FirebaseDao from \"./FirebaseDao\";\r\n\r\nclass App extends Component {\r\n    constructor() {\r\n        super();\r\n        this.dao = new FirebaseDao(config);\r\n        this.submit = this.submit.bind(this);\r\n        this.getArticles = this.getArticles.bind(this);\r\n        this.state = {\r\n            articles: []\r\n        }\r\n    }\r\n\r\n    submit(article) {\r\n        if (article) {\r\n            let key = this.dao.newKey();\r\n            let updated = this.dao.update(key, article);\r\n            return updated;\r\n        }\r\n    }\r\n\r\n    getArticles() {\r\n        let articleItems = [];\r\n        for (let i = 0; i < this.state.articles.length; i++) {\r\n            articleItems.push(<li key={this.state.articles[i].key}>{this.state.articles[i].content}</li>);\r\n        }\r\n        console.log(articleItems);\r\n        return articleItems;\r\n    }\r\n\r\n    // 익명 사용자 여부\r\n    isAnonymous() {\r\n        return true;\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.dao.list(25).on('value', (snapshots) => {\r\n            let items = [];\r\n            snapshots.forEach((dataSnapshot) => {\r\n                let item = dataSnapshot.val();\r\n                item['key'] = dataSnapshot.key;\r\n                console.log(`item 확인 : ${dataSnapshot.val()}`);\r\n                items.push(item);\r\n            });\r\n\r\n            if (items && items.length > 0) {\r\n               this.setState({\r\n                  articles: items.reverse()\r\n               });\r\n            }\r\n        });\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.dao.off();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n                <header className=\"App-header\">\r\n                    <img src={logo} className=\"App-logo\" alt=\"logo\"/>\r\n                    <h2>Stand Up 앱을 만들어 봅시다</h2>\r\n                </header>\r\n                <Editor submit={this.submit} isAnonymous={this.isAnonymous}/>\r\n                <div>\r\n                    <ul>{this.getArticles()}</ul>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}