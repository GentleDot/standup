{"version":3,"sources":["img/standup_logo.png","img/anonymous.jpg","Profile.js","Editor.js","App.js","serviceWorker.js","index.js"],"names":["Profile","isAnonymous","className","src","Anonymous","alt","Editor","this","props","contentEditable","placeholder","onClick","handleSubmit","Component","App","bind","e","console","log","logo","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2RAAe,MAA0B,yCCA1B,G,kBAAA,IAA0B,uCCsB1BA,EAjBC,SAAAC,GACd,OAAIA,EAEE,sBAAKC,UAAU,YAAf,UACI,qBAAKA,UAAU,cAAf,gEAGA,qBAAKA,UAAU,iBAAf,kCACA,qBAAKA,UAAU,qBAAf,SACI,qBAAKC,IAAKC,EAAWC,IAAI,WAAWH,UAAU,uBAKnD,yBCOII,E,uKAnBP,OACI,sBAAKJ,UAAU,aAAf,UACI,cAAC,EAAD,CAASD,YAAaM,KAAKC,MAAMP,cACjC,qBAAKC,UAAU,aAAf,SACI,qBAAKA,UAAU,YACVO,gBAAgB,OAChBC,YAAY,+BAGrB,qBAAKR,UAAU,YAAf,SACI,wBAAQA,UAAU,SAASS,QAASJ,KAAKC,MAAMI,aAA/C,SACI,wE,GAbHC,aC6BNC,E,kDA5BX,aAAe,IAAD,8BACV,gBACKF,aAAe,EAAKA,aAAaG,KAAlB,gBAFV,E,yDAMDC,GACTC,QAAQC,IAAIX,KAAMS,K,oCAKlB,OAAO,I,+BAIP,OACI,sBAAKd,UAAU,MAAf,UACI,yBAAQA,UAAU,aAAlB,UACI,qBAAKC,IAAKgB,EAAMjB,UAAU,WAAWG,IAAI,SACzC,gGAEJ,cAAC,EAAD,eAAYE,c,GAvBVM,aCOEO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpB,QAAQoB,MAAMA,EAAMC,c","file":"static/js/main.553561f1.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/standup_logo.dea47840.png\";","export default __webpack_public_path__ + \"static/media/anonymous.35a8b45d.jpg\";","import React from \"react\";\r\nimport './Profile.css';\r\nimport Anonymous from './img/anonymous.jpg';\r\n\r\n\r\nconst Profile = isAnonymous => {\r\n  if (isAnonymous) {\r\n      return (\r\n        <div className=\"anonymous\">\r\n            <div className=\"today_title\">\r\n                무엇을 공유할까요?\r\n            </div>\r\n            <div className=\"anonymous_name\"> 티파니 </div>\r\n            <div className=\"anonymous_img_wrap\">\r\n                <img src={Anonymous} alt=\"profiles\" className=\"anonymous_img\" />\r\n            </div>\r\n        </div>\r\n      );\r\n  }\r\n    return <div/>; // 익명이 아닌 경우 일단은 빈 <div>\r\n};\r\n\r\nexport default Profile;\r\n","import React, {Component} from \"react\";\r\nimport \"./Editor.css\"\r\nimport Profile from \"./Profile\";\r\n\r\n\r\nclass Editor extends Component{\r\n    render(){\r\n        return (\r\n            <div className=\"wrapEditor\">\r\n                <Profile isAnonymous={this.props.isAnonymous} />\r\n                <div className=\"textEditor\">\r\n                    <div className=\"innerEdit\"\r\n                         contentEditable=\"true\"\r\n                         placeholder=\"글쓰기......\">\r\n                    </div>\r\n                </div>\r\n                <div className=\"actionBar\">\r\n                    <button className=\"upload\" onClick={this.props.handleSubmit}>\r\n                        <span>스탠드업!</span>\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Editor;\r\n","import React, {Component} from 'react';\r\nimport logo from './img/standup_logo.png';\r\nimport './App.css';\r\nimport Editor from './Editor';\r\n\r\nclass App extends Component{\r\n    constructor() {\r\n        super();\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    // 버튼을 눌렀을 때 Action. 우선은 console.log로 확인\r\n    handleSubmit(e){\r\n        console.log(this, e);\r\n    }\r\n\r\n    // 익명 사용자 여부\r\n    isAnonymous(){\r\n        return true;\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div className=\"App\">\r\n                <header className=\"App-header\">\r\n                    <img src={logo} className=\"App-logo\" alt=\"logo\"/>\r\n                    <h2>Stand Up 앱을 만들어 봅시다</h2>\r\n                </header>\r\n                <Editor {...this} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}